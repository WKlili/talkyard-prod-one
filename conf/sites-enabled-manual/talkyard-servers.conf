## To enable HTTPS:
## In section HTTPS Server Nr 1 below, replace  forum.example.com  with your hostname
## (at 3 places). And comment in that section.
##
## To redirect HTTP to HTTPS:
## Comment out the 'include /etc/nginx/...' lines in the HTTP server (not the HTTPS server).
## Comment in the 'return 302 ...' line.
##
## To add more HTTPS servers:
## Copy the HTTPS Server Nr 1 `server {...}` block to a Nr 2, and remove 'backlog=8192'
## from the listen directive in Nr 2 — otherwise there'll be a "duplicate listen options"
## Nginx error. (The backlog should be the same as net.core.somaxconn in /etc/sysctl.conf,
## namely 8192, set in /opt/talkyard/scripts/prepare-ubuntu.sh  [BACKLGSZ]
## — but one may specify this in only one place; that's why you need to remove it.)
##



## For processors with cache line size 32 bytes, you'll easily run
## into this error:
##   nginx: [emerg] could not build server_names_hash,
##        you should increase server_names_hash_bucket_size
## And the solution is to double the bucket size to 64.
## Docs:
## https://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size
##
#server_names_hash_bucket_size 64;



## HTTP Server.
## Replies to HTTPS cert challenges, otherwise redirects to HTTPS.
##
server {
  listen 80      backlog=8192;   # about backlog: see above [BACKLGSZ]
  ## Using ipv6 here, can prevent Nginx from starting, if the host OS has disabled ipv6,
  ## Nginx then won't start and says:
  #    [emerg] socket() [::]:80 failed (97: Address family not supported by protocol)
  #listen [::]:80 backlog=8192;

  server_name _;

  ## For generating HTTPS certs via LetsEncrypt, HTTP-01 challenge.
  location /.well-known/acme-challenge {
    content_by_lua_block {
      require("resty.acme.autossl").serve_http_challenge()
    }
  }

  ## To use HTTP, comment in these two includes, and comment out
  ## "location / { return 302 ... }" below.
  include /etc/nginx/server-limits.conf;
  include /etc/nginx/server-locations.conf;

  ## Redirect from HTTP to HTTPS.
  ## Use temp redirects (302) not permanent (301) in case you'll want to start
  ## allowing http.
  #location / {
  #  return 302 https://$http_host$request_uri;
  #}
}


## HTTPS Server, LetsEncrypt auto generated certs.
##
server {
  listen 443      ssl backlog=8192;   # [BACKLGSZ]
  #listen [::]:443 ssl backlog=8192;

  server_name _;

  # Required, or Nginx won't start. Gets used until we've gotten a LetsEncrypt cert
  # (sth like 10 seconds after first request to server addr).
  ssl_certificate     /etc/nginx/https-cert-self-signed-fallback.pem;
  ssl_certificate_key /etc/nginx/https-cert-self-signed-fallback.key;

  ssl_certificate_by_lua_block {
    require("resty.acme.autossl").ssl_certificate()
  }

  ## For generating HTTPS certs via LetsEncrypt, TLS-ALPN-01 challenge
  ## (which works over HTTPS, unlike the HTTP-01 challenge).
  ## Disabled in nginx.conf, because experimental in the lua-resty-acme plugin.
  #location /.well-known/acme-challenge {
  #  content_by_lua_block {
  #    require("resty.acme.autossl").serve_tls_alpn_challenge()
  #  }
  #}

  include /etc/nginx/server-ssl.conf;
  include /etc/nginx/server-limits.conf;
  include /etc/nginx/server-locations.conf;
}


## HTTPS Server, custom HTTPS cert.
## Replace  forum.example.com  with your hostname.
##
#server {
#  # Comment out 'backlog=...' if you also use a LetsEncrypt auto cert server (above)
#  # — because Nginx won't start if 'backlog=...' is present at two places.
#  listen 443      ssl backlog=8192;   # [BACKLGSZ]
#  #listen [::]:443 ssl backlog=8192;
#
#  server_name forum.example.com;
#
#  ssl_certificate         /etc/certbot/live/forum.example.com/fullchain.pem;
#  ssl_certificate_key     /etc/certbot/live/forum.example.com/privkey.pem;
#
#  include /etc/nginx/server-ssl.conf;
#  include /etc/nginx/server-limits.conf;
#  include /etc/nginx/server-locations.conf;
#}

